<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7a3899eea90f3df8dcfe8fd350900162f3490bed Maintainer: nilgun Status: ready -->
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="function.print">
 <refnamediv>
  <refname>print</refname>
  <refpurpose>Bir dizge çıktılar</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>print</methodname>
   <methodparam><type>string</type><parameter>ifade</parameter></methodparam>
  </methodsynopsis>
  <para>
   <parameter>ifade</parameter>yi çıktılar.
  </para>
  <para>
   <function>print</function> aslında bir işlev değildir (bir dil oluşumudur),
   dolayısıyla bağımsız değişkenini belirtirken yaylı ayraçları kullanmanız gerekmez.
  </para>
  <para>
   <function>echo</function>'dan başlıca farklar,
   <literal>print</literal>'in tek bir bağımsız değişken kabul etmesi ve daima
   <literal>1</literal> döndürmesidir.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>ifade</parameter></term>
     <listitem>
      <para>
       Çıktılanacak ifade. Dizge olmayan değerler <link
       linkend="language.types.declarations.strict"
        ><literal>strict_types</literal> yönergesi</link> etkin olsa bile
       dizgeye zorlanır.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Daima <literal>1</literal> döner.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &strings.errors.vsprintf;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  &strings.changelog.vsprintf;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- <literal>print</literal> örnekleri</title>
    <programlisting role="php">
<![CDATA[
<?php
print "print yaylı ayraçlar olmadan da çalışır.";

// Satırsonu veya boşluk eklemek gerekmez;
// aşağıdaki tek satırda "helloworld" çıktılar.
+print "hello";
+print "world";

print "Bu çok satırlı bir
dizge olup satırsonu karakterleri
de çıktılanır.";

print "Bu çok satırlı bir\ndizge olup satırsonu karakterleri\nde çıktılanır.";

print "Karakterlerin öncelenmesi böyle yapılır: \"Tıpkı böyle\".";

// Bağımsız değişken dizge üreten harhangi bir ifade olabilir
$bu = "Bu da";
print "$bu Buda"; // Bu da Buda

// Ayrıca dizileri de kullanabilirsiniz
$bar = array("değer" => "Buda");

print "Bu da {$bar['değer']} !"; //  Bu da Buda !

// declare(strict_types=1) olsa bile dizge olmayan iadeler dizgeye zorlanır
print 6 * 7; // 42

// Tek tırnak içine alırsanız değişken basılır, değeri değil
print '$bu Buda'; // $bu Buda

// Başka karakter kullanmazsanız sadece değişkenin değeri basılır
print $bu;          // Bu da

// print değer döndürdüğünden ifadelerde kullanılabilir
// Çıktısı: "hello world"
if ( print "hello" ) {
    echo " world";
}

// Çıktısı: "true"
( 1 === 1 ) ? print 'true' : print 'false';
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <title>Yaylı ayraçların kullanımı</title>
   <para>
    <literal>print</literal> deyiminin bağımsız değişkenini yaylı ayraçlar arasına
    almak bir sözdizimi hatasına yol açmaz ve normal bir işlev çağrısı gibi
    görünen bir sözdizimi de üretmez. Ancak bu yanlış anlaşılabilir, çünkü yaylı
    ayraçlar aslında çıktılanacak ifadenin parçasıdır, <literal>print</literal>
    deyimim parçası değildir.
   </para>
   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php
print "hello";
// "hello" basar

print("hello");
// bu da "hello" basar, çünkü ("hello") geçerli bir ifadedir

print(1 + 2) * 3;
// "9" basar; yaylı ayraçlar sayesinde 1+2 önce yorumlanır, sonra da 3*3
// print deyimi ifadenin tümünü tek bir bağımsız değişken olarak görür

if ( print("hello") && false ) {
    print " - inside if";
}
else {
    print " - inside else";
}
// " - inside if" basar
// ("hello") && false ifadesi önce yorumlanır ve false ile sonuçlanır
// bu boş dizgeye zorlanır "" ve çıktılanır
// print deyimi 1 döndürür, böylece if bloğundaki kod çalıştırılır
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <literal>print</literal> büyük bir ifade ile kullanılırken, anahtar sözcüğü
    ve bağımsız değişkenini yaylı ayraçlar arasına almak istenen sonucu üretmek için
    gerekli olabilir:
   </para>

   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php
if ( (print "hello") && false ) {
    print " - inside if";
}
else {
    print " - inside else";
}
// "hello - inside else" basar
// önceki örneğin tersine (print "hello") ifadesi önce yorumlanır
// "hello" bastıktan sonra 1 döndürür
// 1 && false ifadesinin sonucu false olduğundan else bloğundaki kod çalıştırılır

print "hello " && print "world";
// "world1" basar; önce print "world" yorumanır,
// sonra soldaki print'e "hello " && 1 aktarılır

(print "hello ") && (print "world");
// "hello world" basar; ayraçlar print ifadelerinin
// &&'den önce yorumlanmasını sağlar
?>
]]>
     </programlisting>
    </example>
   </para>
  </note>
  &note.language-construct;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>echo</function></member>
    <member><function>printf</function></member>
    <member><function>flush</function></member>
    <member><link linkend="language.types.string">Sayıl dizgeleri belirtme
      yolları</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
